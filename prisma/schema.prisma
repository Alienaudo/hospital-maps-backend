// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client"
    output   = "../src/generated"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum CapacityStatus {
    EMPTY
    MEDIUM
    FULL
}

enum BloodType {
    A_NEGATIVE
    A_POSITIVE
    B_NEGATIVE
    B_POSITIVE
    AB_NEGATIVE
    AB_POSITIVE
    O_NEGATIVE
    O_POSITIVE
}

enum SizeCategory {
    SMALL
    MEDIUM
    LARGE
}

enum ComplexityCategory {
    PRIMARY
    SECONDARY
    TERTIARY
}

enum ServiceCategory {
    GENERAL_HOSPITAL
    TEACHING_HOSPITAL
    COMMUNITY_HOSPITAL
    PEDIATRIC_HOSPITAL
    CARDIOLOGY_HOSPITAL
    ONCOLOGY_HOSPITAL
    MATERNITY_HOSPITAL
    ORTHOPEDIC_HOSPITAL
    PSYCHIATRIC_HOSPITAL
    REHABILITATION_HOSPITAL
    TRAUMA_CENTER
    NEUROLOGY_HOSPITAL
    INFECTIOUS_DISEASE_HOSPITAL
}

enum HospitalOwnership {
    PUBLIC
    PRIVATE
    NON_PROFIT
    MIXED
}

model Hospitals {
    id                 String             @id @default(uuid(7))
    name               String
    description        String
    capacityStatus     CapacityStatus     @map("capacity_status")
    sizeCategory       SizeCategory       @map("size_category")
    complexityCategory ComplexityCategory @map("complexity_category")
    serviceCategory    ServiceCategory    @map("service_category")
    hospitalOwnership  HospitalOwnership  @map("hospital_ownership")

    @@index([name, capacityStatus])
}

model User {
    id         String    @id @default(uuid(7))
    firebaseId String?   @unique @db.VarChar(28)
    name       String    @db.VarChar(100)
    email      String    @unique @db.VarChar(50)
    phone      String    @unique
    bloodType  BloodType @map("blood_type")
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime  @updatedAt @map("updated_at")

    disease                   Disease[]                   @relation(name: "UserDisease")
    allergies                 Allergies[]                 @relation(name: "UserAllergies")
    medication                Medication[]                @relation(name: "UserMedication")
    personalEmergencyContacts PersonalEmergencyContacts[] @relation(name: "UserPersonalEmergencyContacts")

    @@index([name])
}

model Disease {
    id        String   @id @default(cuid())
    name      String
    isChronic Boolean  @map("is_chronic")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    user User[] @relation(name: "UserDisease")

    @@index([name])
}

model Allergies {
    id          String   @id @default(cuid())
    description String   @db.VarChar(300)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    user User[] @relation(name: "UserAllergies")
}

model Medication {
    id              String   @id @default(cuid())
    name            String   @db.VarChar(300)
    isContinuousUse Boolean  @map("is_continuous_use")
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")

    user User[] @relation(name: "UserMedication")

    @@index([name])
}

model PersonalEmergencyContacts {
    id        String   @id @default(cuid())
    name      String   @db.VarChar(50)
    tel       String
    userId    String?
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    user User? @relation(name: "UserPersonalEmergencyContacts", fields: [userId], references: [id])

    @@index([name, tel])
}
